// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {
    // Define a structure for Student
    struct Student {
        uint id;
        string name;
        uint age;
    }

    // Array to store students
    Student[] public students;

    // Function to add a new student
    function addStudent(uint _id, string memory _name, uint _age) public {
        students.push(Student(_id, _name, _age));
    }

    // Function to get the total number of students
    function getStudentCount() public view returns (uint) {
        return students.length;
    }

    // Function to retrieve a student by index
    function getStudent(uint index) public view returns (uint, string memory, uint) {
        require(index < students.length, "Index out of bounds");
        Student memory student = students[index];
        return (student.id, student.name, student.age);
    }

    // Receive function to accept Ether
    receive() external payable {
        // This function is called when Ether is sent to the contract without any data
    }

    // Fallback function
    fallback() external payable {
        // This function is called when no other function matches the call
    }
}
